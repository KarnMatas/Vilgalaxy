import cv2
import numpy as np
from mpl_toolkits import mplot3d
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import pyplot as plt

def cardDetect(frame,b, thres_min, thres_max):
    count = 0
    Shape_list = []
    Card_list = []
    imgGrey = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    # cv2.imshow("imgGrey.jpg", imgGrey)
    gray_blur = cv2.GaussianBlur(imgGrey, (b, b), 0)
    # cv2.imshow("gray_blur.jpg", gray_blur)
    ret, thrash = cv2.threshold(gray_blur, thres_min, thres_max, cv2.THRESH_BINARY_INV)
    # cv2.imshow("thrash.jpg", thrash)
    # cv2.imwrite("thrash.jpg", thrash)
    contours, hierarchy = cv2.findContours(thrash, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
    plane = []
    for i in range(0, len(contours)):
        plane.append(np.zeros((frame.shape[0], frame.shape[1]), np.uint8))
        cv2.drawContours(plane[i], contours, i, 255, -1)
    for i in range(len(plane)):
        cv2.imshow('eiei',plane[i])
        cv2.waitKey(0)
    #     # collect Poly
    #     approx = cv2.approxPolyDP(contours[i], 0.01 * cv2.arcLength(contours[i], True), True)
    #     # edge = cv2.Canny(gray, 100, 20)
    #     # ================= Draw Poly ================================
    #     line = cv2.drawContours(frame, [approx], 0, (0, 0, count), 5)
    #     # filled = cv2.fillPoly(frame, [approx], (0, count, 0))
    #     count += 25
    #     # cv2.imshow("shapes", line)
    #     # area
    #     # area = cv2.contourArea(contours[i])
    #     print(i)
    #     findchild = hierarchy[0][i][2]
    #     print(findchild)
    #     child = []
    #     while findchild != -1:
    #         child.append(findchild)
    #         findchild = hierarchy[0][findchild][2]

    #     if len(approx) == 4:
    #         if hierarchy[0][i][2] != -1:
    #             # print("pass")
    #             x1 = approx[0][0][0] if approx[0][0][0] > approx[3][0][0] else approx[3][0][0]
    #             x2 = approx[1][0][0] if approx[1][0][0] > approx[2][0][0] else approx[2][0][0]
    #             y1 = approx[0][0][1] if approx[0][0][1] > approx[1][0][1] else approx[1][0][1]
    #             y2 = approx[2][0][1] if approx[2][0][1] > approx[3][0][1] else approx[3][0][1]
    #             crop_img = frame[y1:y2, x1:x2]
    #             approxC = []
    #             for j in child:
    #                 approxC = cv2.approxPolyDP(contours[j], 0.01 * cv2.arcLength(contours[i], True), True)
    #                 for k in approxC:
    #                     k[0][0] = k[0][0] - x1
    #                     k[0][1] = k[0][1] - y1
    #             # print(approxC)

    #             Card_list.append(
    #                 dict(Approx=[approx], Crop_Child_Approx=[approxC], Contour=[contours[i]], Child=child, X1=x1, X2=x2, Y1=y1, Y2=y2,
    #                      Crop=crop_img))

    # return Card_list


def edgeDetect(frame, k, min, max):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    cv2.imwrite("gray.jpg", gray)

    kernel = np.ones((k, k), np.float32) / 25
    cv2.imwrite("kernel.jpg", kernel)
    average = cv2.filter2D(gray, -1, kernel)
    # cv2.imwrite("average.jpg", average)

    edge = cv2.Canny(gray, min, max)
    cv2.imwrite("edge.jpg", edge)

    # dst = cv2.cornerHarris(gray, 2, 3, 0.04)
    return edge

def map(x, in_min, in_max, out_min, out_max):
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

def smoothen(frame):
   smkernel = np.ones((5,5),np.uint8)
   smdilate = cv2.dilate(frame, smkernel, iterations= dilate)
   erodilate = cv2.erode(smdilate, smkernel, iterations= erode)

def findendp(path):
    pix = np.copy(path)
    for p in range(pix.shape[0]):
        for q in range(pix.shape[1]):
            if (pix[p][q] != 0):
                pix[p][q] = 1
    fakernelme = np.array([[1,1,1],
                           [1,10,1],
                           [1,1,1]])
    filterme = cv2.filter2D(pix,-1,fakernelme)
    # for p in filterme:
    #     for q in p:
    #         if (q == 11):
                # print("Karn")
    # print(pix)
    # cv2.imshow('pi',filterme)
    return filterme

def PathFinder(frame,dilate,erode,erodeCon):
    imgGrey = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    # cv2.imshow('karn',imgGrey)
    edge = edgeDetect(frame, 5, 53, 73) #200 ,100
    kernel = np.ones((5, 5), np.float32) / 25
    dilation = cv2.dilate(edge, kernel, iterations= 4)
    # erosion = cv2.erode(dilation, kernel, iterations= erode)
    # dilation2 = cv2.dilate(erosion, kernel, iterations= dilate)
    # print(erode)
    # cv2.imshow('famesy',dilation)
    contours, hierarchy = cv2.findContours(dilation, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

    average = cv2.filter2D(imgGrey, -1, kernel)
    # # find contour for paths
    myContours = []
    # print(contours,hierarchy)
    for cnt, hir in zip(contours, hierarchy[0]):
        # if hir[2] == -1:
            if (cv2.contourArea(cnt) > 15000 and cv2.contourArea(cnt) < 30000) :
                myContours.append(cnt)
    # cv2.imshow('fameza',cnt)
    # print(myContours)
    newDraw = np.zeros(frame.shape, np.uint8)
    cv2.drawContours(newDraw, myContours, -1, (255, 255, 255), -1)
    opening = cv2.morphologyEx(newDraw, cv2.MORPH_OPEN, kernel)
    # cv2.imshow("dark", newDraw)
    pathdraw = np.zeros((frame.shape[0], frame.shape[1]), np.uint8)
    pathlst = []
    for path in range(len(myContours)): # แยก path
        pathlst.append(np.zeros((frame.shape[0], frame.shape[1]), np.uint8))  # greyscale เพราะมี กว้าง กับ ยาว
        cv2.drawContours(pathlst[path], myContours, path, 255, -1)
        pathlst[path] = cv2.erode(pathlst[path], kernel, iterations=2)
        # cv2.imshow("path", pathlst[path])
    # หา ค่า min max ของ gradient pixel
    minpix = []
    maxpix = []
    keepixel = []
    for i in range(len(pathlst)):
        temp = np.argwhere(pathlst[i] == 255)
        for j in temp:
            keepixel.append(imgGrey[j[0], j[1]])
        maxpix.append(max(keepixel))
        minpix.append(min(keepixel))
        keepixel = []
    # print([maxpix, minpix])
    # outlinePath = []
    pathdraw = np.zeros((frame.shape[0], frame.shape[1]), np.uint8)
    # for cnt, hir in zip(contours, hierarchy[0]):
    #     if hir[3] == -1:
    #         outlinePath.append(cnt)
    #         cv2.drawContours(pathdraw, outlinePath, -1, 255, -1)
    for c in pathlst:
        pathdraw = cv2.addWeighted(pathdraw, 1, c, 1, 0)
    # cv2.drawContours(pathdraw, pathlst, 0, 255, -1)
    
    # # cv2.waitKey(0)
    # # print(pathdraw.shape)

    # หา skeleton
    smkernel = np.ones((5,5),np.uint8)
    smopening = cv2.morphologyEx(pathdraw, cv2.MORPH_OPEN, smkernel)
    # smdilate = cv2.dilate(pathdraw, smkernel, iterations= dilate)
    smerode = cv2.erode(smopening, smkernel, iterations= 9)
    thinned = cv2.ximgproc.thinning(smerode)
    pathlst_2 = []
    for i in pathlst:
        i = cv2.bitwise_and(i, thinned)
        pathlst_2.append(i)
        # cv2.imshow('kk',i)
        # cv2.waitKey(0)
    X = []
    Y = []
    Z = []  # lb = 10 cm. ub = 20 cm.
    rawZ = []
    for i in range(len(pathlst_2)):
        temp = np.argwhere(pathlst_2[i] == 255)
        for j in temp:
            X.append(j[0])
            Y.append(j[1])
            rawZ.append(imgGrey[j[0], j[1]])
        for k in rawZ:
            # if (maxpix[i] - minpix[i]) > 10.0:
                Z.append(map(k, minpix[i], maxpix[i], 20.0, 10.0)) # สลับ 10  20
                # print([maxpix[i],minpix[i],k,map(k,minpix[i],maxpix[i],10.0,20.0)])
        rawZ = []
    endp = findendp(thinned) # filter to find endpoint
    cv2.imshow("and", pathdraw)
    cv2.imshow("ngoi",thinned)
    cv2.imshow("findendp",endp)
    # print(minpix,maxpix)
    fig = plt.figure()
    ax = plt.axes(projection="3d")
    # ax.plot3D(X, Y, Z, 'gray')
    ax.scatter3D(X, Y, Z, c=Z, cmap='hsv')
    plt.show()
    cv2.waitKey(0)





    # # map ค่า
    # X = []
    # Y = []
    # Z = []  # lb = 10 cm. ub = 20 cm.
    # rawZ = []
    # for i in range(len(pathlst)):
    #     temp2 = np.argwhere(pathlst[i] == 255)
    #     for j in temp2:
    #         X.append(j[0])qq
    #         Y.append(j[1])
    #         rawZ.append(imgGrey[j[0], j[1]])
    #     for k in rawZ:
    #         if (maxpix[i] - minpix[i]) > 10.0:
    #             Z.append(map(k, minpix[i], maxpix[i], 10.0, 20.0))
    #             # print([maxpix[i],minpix[i],k,map(k,minpix[i],maxpix[i],10.0,20.0)])
    #     rawZ = []
    # # print(maxpix[0],minpix[0])
    # # cv2.waitKey(50)
    # for i in range(0, len(contours)):  # เช็ค คอนทัว
    #     cv2.drawContours(frame, contours, i, (0, 0, 255))
    #     # cv2.imshow("shapes", img)
    #     # cv2.waitKey(0)

    # # cv2.imshow("shapes", img)
    # # cv2.waitKey(0)

def main():
    img = cv2.imread('field.jpg', cv2.IMREAD_COLOR)
    # imgex = cv2.imread('card2.jpg', cv2.IMREAD_COLOR)
    cv2.namedWindow('tuner')
    def nothing(x):
        pass
    # create dilation
    cv2.createTrackbar('dilate','tuner',100,500,nothing)
    # create trackbars for erosion
    cv2.createTrackbar('erode','tuner',100,500,nothing)
    # create tratrackbars for erosion contours
    cv2.createTrackbar('erodeCon','tuner',1,10,nothing)
    x = img.copy()
    # findchesb(x)
    # cv2.imshow('chesyy',x)
    # Card = cardDetect(x, 5, 100, 200) #210 250
    # for card_num in range(len(Card)):
    #     crop = Card[card_num]["Crop"]
    #     cv2.imshow("cropped " + str(card_num), crop)
    #     print("..........................................................")
    #     print(Card[card_num]["Crop_Child_Approx"][0])
    #     print(Card[card_num]["Child"][0])
    # matching(img,imgex)
    while(1):
        # get current value
        d = cv2.getTrackbarPos('dilate','tuner')
        e = cv2.getTrackbarPos('erode','tuner')
        ec = cv2.getTrackbarPos('erodeCon','tuner')
        x = img.copy()
        PathFinder(x,d,e,ec)
        # Card = cardDetect(x, 5, 119, 199)
        # for card_num in range(len(Card)):
        #     crop = Card[card_num]["Crop"]
        #     cv2.imshow("cropped " + str(card_num), crop)
        #     print("..........................................................")
        #     print(Card[card_num]["Crop_Child_Approx"][0])
        #     print(Card[card_num]["Child"][0])
        # # PathFinder(img)

        cv2.waitKey(50)
main()

